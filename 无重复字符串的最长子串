/*给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: s = "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: s = "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
示例 4:

输入: s = ""
输出: 0
提示：
0 <= s.length <= 5 * 104
s 由英文字母、数字、符号和空格组成
*/
#include<bits/stdc++.h>
using namespace std;
int lengthOfLongestSubstring(string s){
	set <char> v;//保存已经出现过的字符 
	int n=s.size();
	int res=0,left=0,right=0;
	if(s==""&&n==0) return 0;
	while(right<n){
		if(v.find(s[right])==v.end()){
			v.insert(s[right++]);
			res=max(res,(int)v.size());
		}
		else{
			v.erase(s[left++]);
		}
	}
	return res;
}
int main(){
	string s;
	while(cin>>s)
	cout<<lengthOfLongestSubstring(s)<<endl;
} 
