/*给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: s = "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: s = "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
示例 4:

输入: s = ""
输出: 0
 

提示：

0 <= s.length <= 5 * 104
s 由英文字母、数字、符号和空格组成
*/
class Solution {
  public:
      int lengthOfLongestSubstring(string s) {
          set<char> t;//保存已经出现过的字符
          int res = 0, left = 0, right = 0;
          while (right < s.size()) {
              if (t.find(s[right]) == t.end()) {//一直没有找到(无重复)，便一直return end（）
                 t.insert(s[right++]);
                  res = max(res, (int)t.size());//计算最长字符串
             }  else {
                 t.erase(s[left++]);//从set中擦除一个字符，已经出现过
             }
         }
         return res;
     }
 };
